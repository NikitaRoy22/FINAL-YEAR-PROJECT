{"version":3,"sources":["lib/encryption.js","Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js","lib/utils.js"],"names":["encryptMessage","sharedSecret","message","encryptionKey","crypto","createHash","update","digest","iv","randomBytes","cipher","createCipheriv","encrypted","final","toString","encryptedData","decryptMessage","encryptedMessage","decryptionKey","newIv","Buffer","from","decipher","createDecipheriv","decrypted","concat","ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","_jsxs","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","onClick","handleClick","colorScheme","style","marginTop","async","title","status","duration","isClosable","position","config","headers","data","axios","post","setItem","stringify","error","description","response","isLoading","variant","bg","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","keyPair","generateKeys","publicKey","getPublicKey","privateKey","getPrivateKey","checkStatus","console","log","setTimeout","layeredPublicKey","encryptPublicKey","masterEncryptionKey","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","catch","err","postDetails","files","test","validateEmail","validatePassword","Homepage","Container","maxW","centerContent","Box","d","justifyContent","w","m","borderRadius","borderWidth","Text","fontSize","fontFamily","Tabs","isFitted","TabList","mb","Tab","TabPanels","TabPanel","isSameSender","messages","i","userId","length","sender","_id","isLastMessage","getSender","loggedUser","users","_users$","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","ScrollableChat","ScrollableFeed","map","updatedAtDate","Date","updatedAt","hour","getHours","minute","getMinutes","formattedTime","padStart","messageStyle","backgroundColor","padding","maxWidth","wordWrap","whiteSpace","marginLeft","marginRight","display","flexDirection","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","content","textAlign","toLocaleDateString","UserBadgeItem","handleFunction","admin","Badge","px","py","CloseIcon","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleAddUser","find","u","user1","groupAdmin","Authorization","token","put","chatId","handleRemove","chatName","flexWrap","pb","ml","query","get","handleSearch","Spinner","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","setSharedSecret","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","otherPublicKey","getOtheruserPublicKey","publicKeys","unlayeredPublicKey","decryptPublicKey","computedSecret","computeSecret","emit","io","on","newMessageRecieved","chat","contentObj","decryptedMessage","includes","ArrowBackIcon","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","event","key","dataToSend","Lottie","options","marginBottom","lastTypingTime","getTime","getSenderFull","Chatbox","ChatLoading","Stack","Skeleton","height","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","filter","sel","slice","handleGroup","userToAdd","userPublicKeys","forEach","MyChats","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","as","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById","createECDH","ownUserId","otherUserPublicKey","username","keys","storedPrivateKey","setPrivateKey","createCipher","encryptedPublicKey","createDecipher","decryptedData"],"mappings":"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","file":"static/js/main.df6f8757.chunk.js","sourcesContent":["import crypto from \"crypto\";\r\n\r\nexport const encryptMessage = (sharedSecret, message) => {\r\n  // Derive encryption key using SHA256\r\n  const encryptionKey = crypto\r\n    .createHash(\"sha256\")\r\n    .update(sharedSecret)\r\n    .digest();\r\n\r\n  // Initialization vector (IV)\r\n  const iv = crypto.randomBytes(16);\r\n\r\n  // Create AES-256-CFB cipher\r\n  const cipher = crypto.createCipheriv(\"aes-256-cfb\", encryptionKey, iv);\r\n\r\n  // Encrypt the message\r\n  let encrypted = cipher.update(message, \"utf8\", \"hex\");\r\n  encrypted += cipher.final(\"hex\");\r\n\r\n  return {\r\n    iv: iv.toString(\"hex\"),\r\n    encryptedData: encrypted,\r\n  };\r\n};\r\n\r\nexport const decryptMessage = (sharedSecret, iv, encryptedMessage) => {\r\n  // Derive decryption key using SHA256 (should be same as encryption key)\r\n  const decryptionKey = crypto\r\n    .createHash(\"sha256\")\r\n    .update(sharedSecret)\r\n    .digest();\r\n\r\n  // Initialize IV and encrypted data\r\n  const newIv = Buffer.from(iv, \"hex\");\r\n  const encryptedData = Buffer.from(encryptedMessage, \"hex\");\r\n\r\n  // Create AES-256-CFB decipher\r\n  const decipher = crypto.createDecipheriv(\"aes-256-cfb\", decryptionKey, newIv);\r\n\r\n  // Decrypt the message\r\n  let decrypted = decipher.update(encryptedData);\r\n  decrypted = Buffer.concat([decrypted, decipher.final()]);\r\n\r\n  return decrypted.toString(\"utf8\");\r\n};\r\n\r\n// Function to encrypt a message with a symmetric key\r\nexport function encryptGroupChatMessage(message, symmetricKey) {\r\n  const iv = crypto.randomBytes(16);\r\n  const cipher = crypto.createCipheriv(\"aes-256-cfb\", symmetricKey, iv);\r\n  const encrypted = Buffer.concat([\r\n    cipher.update(message, \"utf8\"),\r\n    cipher.final(),\r\n  ]);\r\n  return { iv: iv.toString(\"hex\"), encryptedData: encrypted.toString(\"hex\") };\r\n}\r\n\r\n// Function to decrypt a message with a symmetric key\r\nexport function decryptGroupChatMessage(\r\n  encryptedMessage,\r\n  decryptedSymmetricKey,\r\n) {\r\n  try {\r\n    const iv = Buffer.from(encryptedMessage.iv, \"hex\");\r\n    const encryptedData = Buffer.from(encryptedMessage.encryptedData, \"hex\");\r\n    const decipher = crypto.createDecipheriv(\r\n      \"aes-256-cfb\",\r\n      decryptedSymmetricKey,\r\n      iv,\r\n    );\r\n    const decrypted =\r\n      decipher.update(encryptedData, \"hex\", \"utf8\") + decipher.final(\"utf8\");\r\n    return decrypted;\r\n  } catch (error) {\r\n    console.error(\"Decryption error:\", error);\r\n    return null; // Or handle the error appropriately\r\n  }\r\n}\r\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n  const { setUser } = ChatState();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config,\r\n      );\r\n\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setUser(data);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"custom\"\r\n        bg=\"rgba(0, 122, 0, 0.7)\"\r\n        width=\"100%\"\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Get Guest User Credentials\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { encryptPublicKey, generateKeys, masterEncryptionKey } from \"../../lib/utils\";\r\nimport { DateRange } from \"@mui/icons-material\";\r\n\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [pic, setPic] = useState();\r\n  const [picLoading, setPicLoading] = useState(false);\r\n\r\n  const keyPair = generateKeys();\r\n  const publicKey = keyPair.getPublicKey(\"base64\");\r\n  const privateKey = keyPair.getPrivateKey(\"base64\");\r\n\r\n  const checkStatus = (data) => {\r\n    // Assuming `data` and `statusEnum` are defined somewhere\r\n    // Replace `data.status` and `statusEnum.ACTIVE` with the actual variables or values\r\n    console.log(data.status);\r\n    if (data.status === 'ACTIVE') {\r\n      history.push(\"/chats\");\r\n    } else {\r\n      setTimeout(checkStatus(data), 1000); // Check status again after 1 second\r\n    }\r\n  };\r\n  const layeredPublicKey=encryptPublicKey(publicKey, masterEncryptionKey);\r\n\r\n  const validateEmail = (email) => {\r\n    // Regular expression for email validation\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  };\r\n\r\n  const validatePassword = (password) => {\r\n    // Regular expression for password validation\r\n    const passwordRegex = /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*\\W)(?!.* ).{8,}$/;\r\n    return passwordRegex.test(password);\r\n  };\r\n  \r\n  \r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    console.log({publicKey});\r\n    console.log({layeredPublicKey});\r\n\r\n    if (!validateEmail(email)) {\r\n      // Validation for email\r\n      toast({\r\n        title: \"Please enter a valid email address.\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  \r\n    if (!validatePassword(password)) {\r\n      // Validation for password\r\n      toast({\r\n        title: \"Password must have at least 8 characters, an uppercase letter, a lowercase letter, a number, and a special character.\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  \r\n    if (!name || !email || !password || !confirmpassword) {\r\n      // Validation for other fields\r\n      toast({\r\n        title: \"Please fill all the fields.\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  \r\n    if (password !== confirmpassword) {\r\n      // Validation for password match\r\n      toast({\r\n        title: \"Passwords do not match.\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      // Submit data\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n          pic,\r\n          publicKey: layeredPublicKey,\r\n        },\r\n        config\r\n      );\r\n  \r\n      // Update local storage\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      localStorage.setItem(\r\n        `keyPair_${name}`,\r\n        JSON.stringify({\r\n          privateKey,\r\n          publicKey,\r\n        })\r\n      );\r\n  \r\n      // Display success message\r\n      toast({\r\n        title: \"Please verify email\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n  \r\n      // Set redirect after state updates are done\r\n      checkStatus(data);\r\n    }\r\n      catch (error) {\r\n      // Display error message\r\n      toast({\r\n        title: \"Error occurred!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } finally {\r\n      // Reset loading state\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  const postDetails = (pics) => {\r\n    setPicLoading(true);\r\n    if (pics === undefined) {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(pics);\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", pics);\r\n      data.append(\"upload_preset\", \"chat-app\");\r\n      data.append(\"cloud_name\", \"piyushproj\");\r\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\r\n        method: \"post\",\r\n        body: data,\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setPic(data.url.toString());\r\n          console.log(data.url.toString());\r\n          setPicLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setPicLoading(false);\r\n        });\r\n    } else {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5px\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"pic\">\r\n        <FormLabel>Upload your Picture</FormLabel>\r\n        <Input\r\n          type=\"file\"\r\n          p={1.5}\r\n          accept=\"image/*\"\r\n          onChange={(e) => postDetails(e.target.files[0])}\r\n        />\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n          <b>Secure Chat Application</b>\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => {\r\n          // Parse updatedAt into a Date object\r\n          const updatedAtDate = new Date(m.updatedAt);\r\n          \r\n          // Get hour and minute from the Date object\r\n          const hour = updatedAtDate.getHours();\r\n          const minute = updatedAtDate.getMinutes();\r\n          \r\n          // Format hour and minute as HH:MM\r\n          const formattedTime = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\r\n\r\n          // Calculate padding based on message length\r\n          //const padding = `${Math.min(Math.max(10, m.content.length), 50)}px`;\r\n\r\n          // Define styles for the message box\r\n          const messageStyle = {\r\n              backgroundColor: m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\",\r\n              borderRadius: \"20px\",\r\n              padding: 15, // Dynamic padding based on message length\r\n              maxWidth: \"60vw\", // Limit maximum width to 60% of the parent div\r\n              wordWrap: \"break-word\", // Allow long words to break and wrap\r\n              whiteSpace: \"pre-line\", // Preserve line breaks\r\n              marginLeft: user._id === m.sender._id ? \"auto\" : \"0\",\r\n              marginRight: user._id === m.sender._id ? \"0\" : \"auto\",\r\n              marginTop: \"5px\", // Adjusted marginTop for better spacing\r\n            };\r\n\r\n          return (\r\n            <div style={{ display: \"flex\", flexDirection: user._id === m.sender._id ? \"row-reverse\" : \"row\" }} key={m._id}>\r\n              {(isSameSender(messages, m, i, user._id) ||\r\n                isLastMessage(messages, i, user._id)) && (\r\n                <Tooltip label={m.sender.name} placement={user._id === m.sender._id ? \"bottom-end\" : \"bottom-start\"} hasArrow>\r\n                  <Avatar\r\n                    mt=\"7px\"\r\n                    mr={1}\r\n                    size=\"sm\"\r\n                    cursor=\"pointer\"\r\n                    name={m.sender.name}\r\n                    src={m.sender.pic}\r\n                  />\r\n                </Tooltip>\r\n              )}\r\n              <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: user._id === m.sender._id ? \"flex-end\" : \"flex-start\" }}>\r\n                <span\r\n                  style={messageStyle}\r\n                >\r\n                  {m.content}\r\n                </span>\r\n                <div style={{ textAlign: \"right\", fontSize: \"0.8rem\", marginTop: \"5px\" }}>\r\n                  {formattedTime} | {updatedAtDate.toLocaleDateString('en-GB')}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\n\r\nconst UserListItem = ({ handleFunction, user }) => {\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config,\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n          publicKey: user1.publicKey,\r\n        },\r\n        config,\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n          publicKey: user1.publicKey,\r\n        },\r\n        config,\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\nimport crypto from \"crypto\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport {\r\n  computeSecret,\r\n  decryptPublicKey,\r\n  getOtheruserPublicKey,\r\n  masterEncryptionKey,\r\n  encryptSymmetricKeyWithECDH,\r\n  decryptSymmetricKeyWithECDH,\r\n} from \"../lib/utils\";\r\nimport {\r\n  decryptGroupChatMessage,\r\n  decryptMessage,\r\n  encryptGroupChatMessage,\r\n  encryptMessage,\r\n} from \"../lib/encryption\";\r\nconst ENDPOINT = \"http://localhost:5000\";\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const [sharedSecret, setSharedSecret] = useState(\"\");\r\n\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config,\r\n      );\r\n\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      // Single Chat\r\n      // Get other user public key\r\n      const otherPublicKey = getOtheruserPublicKey(\r\n        selectedChat.publicKeys,\r\n        user._id,\r\n      );\r\n\r\n      const unlayeredPublicKey = decryptPublicKey(\r\n        otherPublicKey,\r\n        masterEncryptionKey,\r\n      );\r\n\r\n      // Generate Shared Secret\r\n      const computedSecret = computeSecret(unlayeredPublicKey, user.name);\r\n      setSharedSecret(computedSecret);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (!selectedChat) return;\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config,\r\n        );\r\n\r\n        setMessages([...messages, data]);\r\n\r\n        // Encrypt newMessage\r\n        const content = data.content;\r\n        let encryptedMessage;\r\n        let dataToSend;\r\n\r\n        // if (selectedChat.isGroupChat) {\r\n        //   const symmetricKey = crypto.randomBytes(32);\r\n\r\n        //   const otherUserLayeredPublicKeys = selectedChat.publicKeys;\r\n\r\n        //   let otherUserUnlayeredPublicKeys = {};\r\n\r\n        //   // Unlayer them\r\n        //   for (const key in otherUserLayeredPublicKeys) {\r\n        //     const otherUserPublicKey = decryptPublicKey(\r\n        //       otherUserLayeredPublicKeys[key],\r\n        //       masterEncryptionKey,\r\n        //     );\r\n\r\n        //     otherUserUnlayeredPublicKeys[key] = otherUserPublicKey;\r\n        //   }\r\n\r\n        //   let encryptedSymmetricKeys = {};\r\n\r\n        //   for (const key in otherUserUnlayeredPublicKeys) {\r\n        //     const encryptedSymmetricKey = encryptSymmetricKeyWithECDH(\r\n        //       otherUserUnlayeredPublicKeys[key],\r\n        //       symmetricKey,\r\n        //       user.name,\r\n        //     );\r\n\r\n        //     encryptedSymmetricKeys[key] = encryptedSymmetricKey;\r\n        //   }\r\n\r\n        //   encryptedMessage = encryptGroupChatMessage(content, symmetricKey);\r\n\r\n        //   dataToSend = {\r\n        //     ...data,\r\n        //     content: encryptedMessage,\r\n        //     encryptedSymmetricKeys,\r\n        //   };\r\n        // } else {\r\n          encryptedMessage = encryptMessage(sharedSecret, content);\r\n          dataToSend = {\r\n            ...data,\r\n            content: encryptedMessage,\r\n          };\r\n        // }\r\n\r\n        socket.emit(\"new message\", dataToSend);\r\n      } catch (error) {\r\n        console.log(error);\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        // Decrypt received message\r\n        let contentObj;\r\n        const encryptedMessage = newMessageRecieved.content;\r\n\r\n        // if (selectedChatCompare.isGroupChat) {\r\n        //   const { encryptedSymmetricKeys } = newMessageRecieved;\r\n\r\n        //   const senderLayeredPublicKey =\r\n        //     selectedChatCompare.publicKeys[newMessageRecieved.sender._id];\r\n\r\n        //   const senderUnlayeredPublicKey = decryptPublicKey(\r\n        //     senderLayeredPublicKey,\r\n        //     masterEncryptionKey,\r\n        //   );\r\n\r\n        //   const encryptedSymmetricKey = encryptedSymmetricKeys[user._id];\r\n\r\n        //   const decryptedSymmetricKey = decryptSymmetricKeyWithECDH(\r\n        //     senderUnlayeredPublicKey,\r\n        //     encryptedSymmetricKey,\r\n        //     user.name,\r\n        //   );\r\n\r\n        //   console.log({\r\n        //     decryptedSymmetricKey,\r\n        //   });\r\n\r\n        //   const decryptedMessage = decryptGroupChatMessage(\r\n        //     encryptedMessage,\r\n        //     decryptedSymmetricKey,\r\n        //   );\r\n        //   contentObj = {\r\n        //     ...newMessageRecieved,\r\n        //     content: decryptedMessage,\r\n        //   };\r\n        // } else {\r\n          const { iv, encryptedData } = encryptedMessage;\r\n          const decryptedMessage = decryptMessage(\r\n            sharedSecret,\r\n            iv,\r\n            encryptedData,\r\n          );\r\n\r\n          contentObj = {\r\n            ...newMessageRecieved,\r\n            content: decryptedMessage,\r\n          };\r\n        // }\r\n\r\n        setMessages([...messages, contentObj]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      let userPublicKeys={};\r\n      selectedUsers.forEach((u) => {\r\n        userPublicKeys[u._id] = u.publicKey; // Assuming `publicKey` is stored in `selectedUsers`\r\n      });\r\n\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n          publicKeys: userPublicKeys,\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Hazel, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      console.log(data);\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          <b>Secure Chat Application</b>\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import crypto from \"crypto\";\r\n\r\nexport function generateKeys() {\r\n  const keyPair = crypto.createECDH(\"secp256k1\");\r\n\r\n  keyPair.generateKeys();\r\n\r\n  return keyPair;\r\n}\r\n\r\nexport const getOtheruserPublicKeys = (publicKeys, ownUserId) => {\r\n  // Initialize an empty object to store other users' public keys\r\n  const otherUsersPublicKeys = {};\r\n\r\n  // Loop through the publicKeys object to find the other users' public keys\r\n  for (const userId in publicKeys) {\r\n    // Add the other user's public key to the object, using their user ID as the key\r\n    otherUsersPublicKeys[userId] = publicKeys[userId];\r\n  }\r\n\r\n  return otherUsersPublicKeys;\r\n};\r\n\r\nexport const getOtheruserPublicKey = (publicKeys, ownUserId) => {\r\n  // Initialize a variable to store the other user's public key\r\n  let otherUserPublicKey;\r\n\r\n  // Loop through the publicKeys object to find the other user's public key\r\n  for (const userId in publicKeys) {\r\n    // Check if the current user ID is not the own user ID\r\n    if (userId !== ownUserId) {\r\n      // Store the other user's public key\r\n      otherUserPublicKey = publicKeys[userId];\r\n      // Break the loop as we found the first other user's public key\r\n      break;\r\n    }\r\n  }\r\n\r\n  return otherUserPublicKey;\r\n};\r\n\r\nexport const computeSecret = (publicKey, username) => {\r\n  // Get privateKey from localStorage\r\n  const keys = localStorage.getItem(`keyPair_${username}`);\r\n  const storedKeys = JSON.parse(keys);\r\n  const storedPrivateKey = storedKeys.privateKey;\r\n\r\n  // Set Private key\r\n  const keyPair = crypto.createECDH(\"secp256k1\");\r\n  keyPair.setPrivateKey(storedPrivateKey, \"base64\");\r\n\r\n  return keyPair.computeSecret(publicKey, \"base64\", \"hex\");\r\n};\r\n\r\nexport const masterEncryptionKey =\r\n  \"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\";\r\n\r\nexport const encryptPublicKey = (publicKey, masterEncryptionKey) => {\r\n  const cipher = crypto.createCipher(\"aes-256-cbc\", masterEncryptionKey);\r\n  let encryptedData = cipher.update(publicKey, \"utf8\", \"hex\");\r\n  encryptedData += cipher.final(\"hex\");\r\n  return encryptedData;\r\n};\r\n\r\nexport const decryptPublicKey = (encryptedPublicKey, masterEncryptionKey) => {\r\n  const decipher = crypto.createDecipher(\"aes-256-cbc\", masterEncryptionKey);\r\n  let decryptedData = decipher.update(encryptedPublicKey, \"hex\", \"utf8\");\r\n  decryptedData += decipher.final(\"utf8\");\r\n  return decryptedData;\r\n};\r\n\r\nexport const encryptWithSharedSecret = (sharedSecret, symmetricKey) => {\r\n  const sharedSecretBuffer = Buffer.from(sharedSecret, \"hex\");\r\n\r\n  console.log({\r\n    encryptSharedBuffer: sharedSecretBuffer,\r\n  });\r\n\r\n  // Generate a random IV\r\n  const iv = crypto.randomBytes(16);\r\n\r\n  // Convert the symmetricKey to a Buffer\r\n  const symmetricKeyBuffer = Buffer.from(symmetricKey);\r\n\r\n  // Create a cipher with AES-256-CFB algorithm\r\n  const cipher = crypto.createCipheriv(\"aes-256-cfb\", sharedSecretBuffer, iv);\r\n\r\n  // Update the cipher with symmetricKey and finalize it\r\n  const encrypted = Buffer.concat([\r\n    cipher.update(symmetricKeyBuffer, \"utf8\"),\r\n    cipher.final(),\r\n  ]);\r\n\r\n  // let encryptedData = cipher.update(symmetricKeyBuffer, \"utf8\", \"hex\");\r\n  // encryptedData += cipher.final(\"hex\");\r\n\r\n  return {\r\n    iv: iv.toString(\"hex\"),\r\n    encryptedData: encrypted.toString(\"hex\"),\r\n  };\r\n};\r\n\r\nexport const decryptWithSharedSecret = (\r\n  sharedSecret,\r\n  encryptedSymmetricKey,\r\n) => {\r\n  // Convert shared secret and IV to Buffer objects\r\n  const sharedSecretBuffer = Buffer.from(sharedSecret, \"hex\");\r\n  const iv = Buffer.from(encryptedSymmetricKey.iv, \"hex\");\r\n\r\n  // Create decipher object with the shared secret and IV\r\n  const decipher = crypto.createDecipheriv(\r\n    \"aes-256-cfb\",\r\n    sharedSecretBuffer,\r\n    iv,\r\n  );\r\n\r\n  // Update the decipher with encrypted data\r\n  let decryptedData = decipher.update(\r\n    encryptedSymmetricKey.encryptedData,\r\n    \"hex\",\r\n    \"utf8\",\r\n  );\r\n\r\n  decryptedData += decipher.final(\"utf8\");\r\n\r\n  return decryptedData;\r\n};\r\n\r\nexport function encryptSymmetricKeyWithECDH(\r\n  recipientPublicKey,\r\n  symmetricKey,\r\n  username,\r\n) {\r\n  // Derive the shared secret from your private key and the recipient's public key\r\n  const sharedSecret = computeSecret(recipientPublicKey, username);\r\n\r\n  // Encrypt the symmetric key using the shared secret\r\n  const encryptedSymmetricKey = encryptWithSharedSecret(\r\n    sharedSecret,\r\n    symmetricKey,\r\n  );\r\n\r\n  return encryptedSymmetricKey;\r\n}\r\n\r\nexport function decryptSymmetricKeyWithECDH(\r\n  senderPublicKey,\r\n  encryptedSymmetricKey,\r\n  username,\r\n) {\r\n  // Derive the shared secret from your private key and the sender's public key\r\n  const sharedSecret = computeSecret(senderPublicKey, username);\r\n\r\n  console.log({\r\n    fromDecryptECDH: sharedSecret,\r\n  });\r\n\r\n  let symmetricKey;\r\n  // Decrypt the symmetric key using the shared secret\r\n  try {\r\n    symmetricKey = decryptWithSharedSecret(sharedSecret, encryptedSymmetricKey);\r\n  } catch (error) {\r\n    console.log({\r\n      error,\r\n    });\r\n  }\r\n\r\n  return symmetricKey;\r\n}\r\n"],"sourceRoot":""}